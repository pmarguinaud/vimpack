#!/usr/bin/perl -w



=head1 NAME

gitpack

=head1 SYNOPSIS

  $ cd pack
  $ cd 48t3_sidyn-spcm.05.IMPIIFC2018.x
  $ gitpack branch 
  cy48t3_cpg_drv+
  cy48t3_cpg_drv+pgi2211+openacc
  cy48t3_cpg_drv+pgi2211+openacc-link
  cy48t3_cpg_drv-
  master
  merge_CY48T3_and_48R1
  merge_CY48T3_and_48R1-pm1
  $ gitpack checkout ...
  $ ...

=head1 DESCRIPTION

C<gitpack> is a script wrapping C<git>. All git commands are available from
within a pack.

=head1 PRINCIPLES

C<gitpack> will synchronize files between the git repository and the gmkpack
local view : all changes made to the files located in the local view are copied
back to the git repository; in return, all git commands such as checkout, merge, 
etc. will propagate to gmkpack local view.

When synchronizing files to the local view, C<gitpack> will take into account
existing files in other C<gmkpack> views (main, inter.1, inter.2, etc.)

=head1 INITIALIZING A PACK

In order to use C<gitpack>, a pack has to be initialized. Two possibilities :

=head2 The current pack is derived from another pack, which has already beeen initialized with gitpack:

In this case, running the following command is sufficient :

  $ gitpack --init

The derived pack will inherit the branch of its master pack.

=head2 No gitpack initialisation has been performed in the current pack hierarchy:

It is then necessary to initialize the current pack from an existing git repository; 
for instance :

  $ gitpack --init --repository $HOME/IAL

=head1 GITPACK CONFIGURATION

It is possible to exclude files from C<gitpack> management; before initializing the pack,
add a .gitpack.conf. This file may contain a list of regular expressions :

  {
    ignore => [
                qr,oops_src/,o,
                qr,dummies.c,o,
                qr,dummy/unused/,o,
                ... 
              ]
  }

All files matching one of these regex will not be managed by C<gitpack>.

=head1 DATA

This section describes C<gitpack> data.

C<gitpack> copies the git repository in C<.gitpack/git>. In order to make file comparison fast and
save disk space, files from the repository are hard linked to the pack local view.
It is therefore important to edit these files using C<vimpack> (which is aware of this, and creates 
single linked file before saving changes), or make sure that files to be edited are single linked.

C<gitpack> also maintains a copy of the set of files that was available in the local view the last
time it was invoked. This set of files is located in C<.gitpack/tmp>.

=head1 SEE ALSO

C<gmkpack>, C<git>, C<vimpack>

=head1 AUTHOR

pmarguinaud@hotmail.com

=cut

use strict;
use File::Find;
use File::Path;
use File::Copy;
use File::Basename;
use FileHandle;
use File::stat;
use Data::Dumper;
use Storable;
use Cwd;
use Getopt::Long;
use YAML;

use FindBin qw ($Bin);

our $BIN;

use lib do  
{ 
  ($BIN, my $exe) = ($Bin, $0);
  for (1 .. 100)
    {   
      last unless (-l $exe);
      $exe = 'File::Spec'->rel2abs (readlink ($exe), $BIN);
      $BIN = &dirname ($exe);
    }   
  ("$BIN/lib", "$BIN/perl5")
};


use bt;

my @GIT = ('/bin/git');
my @GITK = ('gitk');
my $GITPACK = '.gitpack';
my $PACK = &cwd ();
my $HOME = (getpwuid ($>))[7];
my $KO;


sub run
{
  my @cmd = @_;
  system (@cmd) and die ("Command `@cmd' failed\n");
}

my $gitpack_time = "$GITPACK/time";

sub getView
{
  my @view = do { my $fh = 'FileHandle'->new ("<$PACK/.gmkview"); <$fh> };
  chomp for (@view);
  @view = map { "$PACK/src/$_" } @view;
  return @view;
}

sub genesis
{
  my $fh = 'FileHandle'->new ('<.genesis');
  chomp (my $line = <$fh>);

  my @token = split (m/\s+/o, $line);
  shift (@token);

  my %genesis;

  my $opt;
  for my $token (@token)
    {
      if ($token =~ s/^-//o)
        {
          $opt = $token;
          $genesis{$opt} = 1;
        }
      else
       {
         $genesis{$opt} = $token;
       }
    }


  return \%genesis;
}

sub createConfFromRepo
{
  if ((! -f '.gitpack.conf') && (-f "./$GITPACK/git/.gmkpack_ignored"))
    {
      $KO = undef;  # Create new conf file, reset KO

      my @ignore = grep { ! ((m/^\s*#/o) || (m/^\s*$/o)) } do { my $fh = 'FileHandle'->new ("<./$GITPACK/git/.gmkpack_ignored"); <$fh> };
      for (@ignore)
        {
          chomp;
          s/(?:^\s*|\s*$)//go;
        }

      my $fh = 'FileHandle'->new ('>.gitpack.conf');
      $fh->print (<< 'EOF');
{
	ignore => [
EOF

      for my $ignore (@ignore)
        {
          if (-d "./$GITPACK/git/$ignore")
            {
              $fh->print ("               qr,^$ignore/,o,\n");
            }
          else
            {
              $fh->print ("               qr,^$ignore\$,o,\n");
            }
        }

      $fh->print (<< 'EOF');
	],
}
EOF
      $fh->close ();
    }
}

sub init
{
  my %opts = @_;

  my $name = $opts{name} || '';

  return if (-d "$GITPACK/git/$name");

  my @view = &getView ();

  for my $view (@view[1..$#view])
    {
      my $pack = readlink ($view);
      $pack = &dirname ($pack) for (1 .. 2);
      if (-f "$pack/.gitpack.conf")
        {
          &copy ("$pack/.gitpack.conf", '.gitpack.conf');
          last;
        }
    }
  if (! -f '.gitpack.conf')
    {
      my $genesis = &genesis ();
      my $cycle = $genesis->{r};
      my $conf = "$BIN/gitpack.$cycle.conf";
      &copy ($conf, '.gitpack.conf') if (-f $conf);
    }

  my $pack1;

  if (scalar (@view) > 1)
    {
      $pack1 = readlink ($view[1]); 
      $pack1 = &dirname ($pack1) for (1 .. 2);
    }

  if (my $repo = $opts{repository})
    {
      &mkpath ("$GITPACK/");

      if ($opts{branch})
        {
          &run (@GIT, 'clone', '--branch', $opts{branch}, $repo, "./$GITPACK/git/$name");
        }
      elsif ($opts{commit})
        {
          &run (@GIT, 'clone', $repo, "./$GITPACK/git/$name");
          &git (cmd => ['checkout', $opts{commit}], name => $name);
        }
      else
        {
          &run (@GIT, 'clone', $repo, "./$GITPACK/git/$name");
        }

      (-f '.gitpack.conf') or &createConfFromRepo ();
      
      my $p = &scanPack (map { "$_/$name" } @view[1..$#view]);

      my $g = &scanPack ({name =>$name}, "$PACK/$GITPACK/git/$name");

      my @f = sort keys (%{ {%$p, %$g} });

      for my $f (@f)
        {
          my @l = ("$PACK/$GITPACK/tmp/$name/$f", "$view[0]/$name/$f");
          my $stp = $p->{$f} && stat ($p->{$f});
          my $stg = $g->{$f} && stat ($g->{$f});

          if ($p->{$f} && $g->{$f})
            {
              unlink ($_) for (@l);
              unless (&testEqualFiles ($p->{$f}, $g->{$f}))
                {
                  &doLink ($g->{$f}, $_) for (@l);
                }
            }
          elsif ($p->{$f} && (! $g->{$f}))
            {
              &doZeroFile ($_) for (@l);
            }
          elsif ((! $p->{$f}) && $g->{$f})
            {
              &doLink ($g->{$f}, $_) for (@l);
            }
        }

    }
  elsif ($pack1 && (-d "$pack1/$GITPACK/git/$name"))
    {
      &mkpath ("$GITPACK/");

      my $stg = stat ("$pack1/$GITPACK/git/$name");
      my $stG = stat ($GITPACK);

      if ($stg->uid () == $stG->uid ())
        {
          &run ("cp -alf $pack1/$GITPACK/git/$name ./$GITPACK/git/$name");
        }
      else
        {
          &run ("cp -r $pack1/$GITPACK/git//$name ./$GITPACK/git/$name");
        }

      (-f '.gitpack.conf') or &createConfFromRepo ();

    }
  elsif ($pack1 && -f (my $populated_from = "$pack1/.populated_from"))
    {
      my $text = do { my $fh = 'FileHandle'->new ("<$populated_from"); local $/ = undef; <$fh> };

      my ($repo) = ($text =~ m/- IAL :\s*git\s*:\s*(\S+)/goms);
      my ($commit) = ($text =~ m/Commit:\s*(\S+)/goms);

      if ((! $repo) && $commit)
        {
          # Assume repository is ACCORD-NWP
          $repo = "https://github.com/ACCORD-NWP/IAL";
        }

      die ("Cannot find repo & commit in $populated_from") unless ($repo && $commit);

      &init (%opts, repository => $repo, commit => $commit);

      (-f '.gitpack.conf') or &createConfFromRepo ();

    }
  elsif ($pack1 && -f (my $bundle = "$pack1/bundle.yml"))
    {

      my $Y = do
      {
        local $SIG{__WARN__} = undef;
        local $SIG{__DIE__} = undef;
        &YAML::LoadFile ($bundle);
      };

      for (@{ $Y->{projects} })
        {
          my ($name, $proj) = %$_;

          my ($repo, $commit, $gmkpack) = @{$proj}{qw (git version gmkpack)};

	  next unless (index ($gmkpack, 'src/local') == 0);

	  ($name) = ($gmkpack =~ m,^src/local/(\w+),o);
	  $name ||= '';

          if ($repo =~ s/^~(\w+)//o)
            {
              my $user = $1;
              my ($home) = (getpwnam ($user))[7];
              $repo = "$home$repo";
            }

          &init (%opts, repository => $repo, commit => $commit, name => $name);

        }

      (-f '.gitpack.conf') or &createConfFromRepo ();

    }
  else
    {
      goto NOTFOUND;
    }
  
  &mkpath ("$GITPACK/tmp");

  'FileHandle'->new (">$gitpack_time");

  return;

NOTFOUND:
  die ("No git repository was found\n");
}

sub check
{
  my @view = &getView ();

  my $p = &scanPack (@view);
  my $g = &scanPack ("$PACK/$GITPACK/git");

  my @f = sort keys (%{ {%$p, %$g} });

  for my $f (@f)
    {
      my $stp = $p->{$f} && stat ($p->{$f});
      my $stg = $g->{$f} && stat ($g->{$f});
      if ($p->{$f} && $g->{$f})
        {
          unless (&testEqualFiles ($p->{$f}, $g->{$f}))
            {
              print "M $f\n";
            }
        }
      elsif ($p->{$f} && (! $g->{$f}))
        {
          print "+ $f\n";
        }
      elsif ((! $p->{$f}) && $g->{$f})
        {
          print "- $f\n";
        }
    }
}


my %opts = (name => '');

sub git
{
  use POSIX qw ();
  my %args = @_;

  my $name = $args{name} || '';

  my @cmd = (@GIT, "--git-dir=$PACK/$GITPACK/git/$name/.git", "--work-tree=$PACK/$GITPACK/git/$name", @{ $args{cmd} || [] });

  print "@cmd\n" if ($opts{verbose});


  chdir ("$PACK/$GITPACK/git/$name/.git") if ($args{chdir});
  my $c = system (@cmd);
  chdir ($PACK) if ($args{chdir});

  if ($c)
    {
      $c = $?;
      my $signal = $c & 127;
      if ($args{die})
        {
          die unless ($signal == &POSIX::SIGPIPE); # Ignore PIPE signal (generated by "| less")
        }
    }

  return ! $c;
}

sub gitk
{
  use POSIX qw ();
  my %args = @_;

  my @cmd = (@GITK, @{ $args{cmd} || [] });

  print "@cmd\n" if ($opts{verbose});

  chdir ("$PACK/$GITPACK/git/");

  system ('pwd');

  my $c = system (@cmd);
  chdir ($PACK);

  if ($c)
    {
      $c = $?;
      my $signal = $c & 127;
      if ($args{die})
        {
          die unless ($signal == &POSIX::SIGPIPE); # Ignore PIPE signal (generated by "| less")
        }
    }

  return ! $c;
}

my @r = qw (branch push status log show commit fetch diff tag remote difftool blame rev-parse);
my @w = qw (checkout pull merge reset mergetool cherry-pick rebase gui);
my @chdir = qw (mergetool);

sub bash
{
  for my $command (@r, @w)
    {
      print (<< "EOF");
function $command ()
{
  gitpack $command \$*
}

EOF
    }
}

my @opts_f = qw (verbose init bash help check force-r force-w dont-remove-identical-files);
my @opts_s = qw (repository branch name);

sub help
{
  print "Usage: " . &basename ($0) . "\n" 
      . " Options:\n" . join ('', map { "   --$_\n" } @opts_f, @opts_s)
      . " Commands:\n" . join ('', map { "   * $_\n" } (@r, @w));
}

my $stgitpack_time = stat ($gitpack_time);

sub resetTime
{
  utime (0, 0, $gitpack_time);
  $stgitpack_time = stat ($gitpack_time);
}

if (@ARGV && ($ARGV[0] =~ m/^-/o))
  {
    &GetOptions
    (
      (map { ($_, \$opts{$_}) } @opts_f),
      (map { ("$_=s", \$opts{$_}) } @opts_s),
    );

    if ($opts{repository} && (-d "$opts{repository}/.gitpack/git"))
      {
        $opts{repository} = "$opts{repository}/.gitpack/git";
      }

    if ($opts{init})
      {
        &init (%opts);
        exit (0);
      }
    elsif ($opts{bash})
      {
        &bash (%opts);
        exit (0);
      }
    elsif ($opts{check})
      {
        &check (%opts);
        exit (0);
      }
    elsif ($opts{help})
      {
        &help (%opts);
        exit (0);
      }
    elsif ($opts{'force-r'})
      {
        &resetTime ();
        &r ();
        exit (0);
      }
    elsif ($opts{'force-w'})
      {
        &resetTime ();
        &w ();
        exit (0);
      }
  }

my $command = shift;
my @args = @ARGV;

$command or exec (@GIT);

my $r = grep { $_ eq $command } @r;
my $w = grep { $_ eq $command } @w;

unless ($r || $w)
  {
    die ("Unknown command `$command'\n");
  }


sub scanPack
{
  my $opts = ref ($_[0]) ? shift (@_) : {name => ''};
  my @view = @_;

  my $name = $opts{name};

  use Digest::MD5;
  my $key = join ('-', map ({ &Digest::MD5::md5_hex ($_) } @view)); 
  my $file = "$GITPACK/scan/$key.pl";

  my $p = {};

  if (-f $file)
    {
      $p = &Storable::retrieve ($file);
    }
  else
    {
      for my $view (@view)
        {
          chdir ($view);
          my $wanted = sub 
          { 
            my $f = $File::Find::name; 
	    if (&ok ($f))
	      {
	        my $g = $f;
	        $g = "$name/$g" if ($name);
                $p->{$g} ||= 'File::Spec'->rel2abs ($f);
	      }
          };
          if (my @dir = grep { -d } <*>)
            {
              &find ({wanted => $wanted, no_chdir => 1}, @dir); 
            }
          chdir ($PACK);
        }
     
      if (@view && (-l $view[0]))
        {
          # Cache the result
          &mkpath ("$GITPACK/scan");
          &Storable::nstore ($p, $file);
        }
    }


  return $p;
}

sub getConf
{
  my $pack = shift;
  
  my @view = &getView ();

  for my $view (@view)
    {
      my $pack = &dirname (&dirname ($view));
      my $conf = "$pack/.gitpack.conf";
      return $conf if (-f $conf);
    }
  
  return "$pack/.gitpack.conf";
}

sub ok
{
  my $f = shift;
  
  my $ret = 0;

  goto RETURN unless (-f $f);

  unless ($KO)
    {
      $KO = [];

      for my $conf ("$HOME/.gitpack.conf", &getConf ($PACK))
        {
          next unless (-f $conf);
          $conf = do ($conf);
          push @$KO, @{ $conf->{ignore} || [] };
        }
    }

  for my $m (@$KO)
    {
      goto RETURN if ($f =~ $m);
    }

  goto RETURN if ($f =~ m/\.(?:lst|optrpt|o|mod|smod|ok|swp)$/o);
  goto RETURN if ($f =~ m,odb/ddl\.\w+/\w+\.(?:c|ddl_)$,o);
  goto RETURN if ($f =~ m/\.(?:F90|F)\.xml$/o);

  $ret = 1;

RETURN:

  return $ret;
}

sub doLink
{
  my ($f, $g) = @_;
  print "LN $f $g\n" if ($opts{verbose});
  unlink ($g) if (-f $g);
  my $d = &dirname ($g);
  &mkpath ($d) unless (-d $d);
  link ($f, $g);
}

sub doZeroFile
{
  my $f = shift;
  my $d = &dirname ($f);
  &mkpath ($d) unless (-d $d);
  unlink ($f);
  print "ZERO $f\n" if ($opts{verbose});
  'FileHandle'->new (">$f");
}

sub doUnlink
{
  my $f = shift;
  print "RM $f\n" if ($opts{verbose});
  unlink ($f);
}

sub slurp
{
  my $f = shift;
  my $fh = 'FileHandle'->new ("<$f");
  $fh or die ("Cannot open $f");
  local $/ = undef;
  my $data = <$fh>;
  return $data;
}

sub testEqualFiles
{
  # Try to make it fast
  my ($f, $g, $stf, $stg) = @_;

  $stf ||= stat ($f);
  $stg ||= stat ($g);

  # Very same file
  return 1 if (($stf->dev == $stg->dev) && ($stf->ino == $stg->ino));

  # Different size 
  return 0 if ($stf->size != $stg->size);

  # Different modes
  return 0 if ($stf->mode != $stg->mode);

  # Slow: compare file contents
  return 1 if (&slurp ($f) eq &slurp ($g));

  return 0;
}

sub newer
{
  my ($f, $g, $stf, $stg) = @_;
  return $stf->mtime > $stg->mtime;
}


sub r
{
  my @view = &getView ();
  unshift (@view, "$PACK/$GITPACK/tmp");

  # Compare tmp and local and see what has changed

  my $v0 = &scanPack ($view[0]); # Scan tmp
  my $v1 = &scanPack ($view[1]); # Scan local
  
  my @f = keys (%{ {%$v0, %$v1} });
  
  my (@p, @m, @c, @z); # +, -, changed, zero
  my @g; # + in git repo
  
  for my $f (@f)
    {
      my ($f0, $f1) = ($v0->{$f}, $v1->{$f});
  
      my $stf0 = $f0 && stat ($f0);
      my $stf1 = $f1 && stat ($f1);
  
      if ($f1)
        {
          next if (&newer ($gitpack_time, $f1, $stgitpack_time, $stf1));
          # Newly zeroed file
          if (($stf1->size == 0) && ((! $stf0) || ($stf0->size)))
            {
              my $exists = 0;
              # Check it does exist in parent pack
              for my $view (@view[2..$#view])
                {
                  last if ($exists = -f "$view/$f");
                }
              if ($exists)
                {
                  push @z, $f;
                  next; 
                }
            }
        }
  
      if ($f0 && (! $f1))
        {
          push @m, $f;
        }
      elsif ($f1 && (! $f0))
        {
          push @p, $f;
          push @g, $f unless (-f "$PACK/$GITPACK/git/$f");
        }
      elsif (! &testEqualFiles ($f0, $f1, $stf0, $stf1))
        {
          push @c, $f;
        }
    }

# print &Dumper ([p => \@p, m => \@m, c => \@c, z => \@z]);
  
  # Add new/modified files
  
  for my $f (@c, @p)
    {
      &doLink ($v1->{$f}, "$PACK/$GITPACK/tmp/$f");
      &doLink ($v1->{$f}, "$PACK/$GITPACK/git/$f"); 
    }
  for my $f (@g)
    {
      &git (cmd => ['add', '-f', $f], die => 1);
    }
  
  # Remove deleted files
  
  for my $f (@m)
    {
      &doUnlink ("$PACK/$GITPACK/tmp/$f");
      &git (cmd => ['rm', '-f', '--quiet', $f], die => 1);
    }
  
  for my $f (@z)
    {
      &doLink ($v1->{$f}, "$PACK/$GITPACK/tmp/$f");
      &git (cmd => ['rm', '-f', '--quiet', $f], die => 1) if (-f "$PACK/$GITPACK/git/$f");
    }
}

sub w
{
  my @view = &getView ();
  unshift (@view, "$PACK/$GITPACK/tmp");

  my $g = &scanPack ("$GITPACK/git");

  # Add new files from repository to tmp and local

  my $remove_if_in_parent = sub
  {
    my ($f, $stf) = @_;
    for my $view (@view[2..$#view])
      {
        my $v = "$view/$f";
        next unless (my $stv = stat ($v));
        if (&testEqualFiles ($g->{$f}, $v, $stf, $stv))
          {
            # File exists and is the same as in the git repo, remove local copy
            &doUnlink ("$view[$_]/$f") for (0 .. 1);
            return 1;
          }
        else
          {
            return 0;
          }
       }
     return 0;
  };

  MAIN: for my $f (sort keys (%$g))
    {
      my $stf = stat ($g->{$f});
   
      # This file has already been looked at earlier; skip it
      if (&newer ($gitpack_time, $g->{$f}, $stgitpack_time, $stf))
        {
          # If the file has not been checkout out by git  and is identical in git repo and parent pack
          # we need to remove it from local & tmp
          if ((-f "$view[0]/$f") && (! $opts{'dont-remove-identical-files'}))
            {
              $remove_if_in_parent->($f, $stf);
            }
          next MAIN;
        }
     
      if (my $stl = stat ("$view[0]/$f"))
        {
          unless ($stl->size) 
            {
              # File was marked as removed in tmp directory, but was retrieved by a checkout
              # Remove the zero sized file
              &doUnlink ("$view[$_]/$f") for (0 .. 1);
            }
        }

      next MAIN if ($remove_if_in_parent->($f, $stf));

      &doLink ($g->{$f}, "$view[$_]/$f") for (0 .. 1);
    }

  # Remove files from tmp and local, when they have vanished from repository

  my $v0 = &scanPack ($view[0]);
  my $v1 = &scanPack ($view[1]);
  for my $f (sort keys (%$v0))
    {
      next if (-f "$PACK/$GITPACK/git/$f");
      &doUnlink ($v0->{$f}); delete $v0->{$f};
      &doUnlink ($v1->{$f}); delete $v1->{$f};
    }

  # Removed files from parent pack become empty
  my $p = &scanPack (@view[2..$#view]);
  for my $f (sort keys (%$p))
    {
      next if (-f "$PACK/$GITPACK/git/$f");
      for my $view (@view[0,1])
        {
          my $g = "$view/$f";
          &doZeroFile ($g); 
        }
    }

}


unless (-d "$PACK/$GITPACK")
  {
    die ("`$PACK/$GITPACK' was not found\n");
  }


#####        First part : update git repository with local changes         #####

&r ();

#####                   Second part : run git command                      #####

my $c;

if ($command eq 'gui')
  {
    $c = &gitk (cmd => [@args], die => 0);
  }
else
  {
    $c = &git (cmd => [$command, @args], die => 0, chdir => (grep ({ $_ eq $command } @chdir) || 0), name => $opts{name});
  }

#####          Third part : update local and tmp using repository          #####

&w () if ($w);

'FileHandle'->new (">$gitpack_time");

exit (! $c);


