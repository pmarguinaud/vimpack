#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use FindBin qw ($Bin);
use File::Spec;
use lib "$Bin/lib";

use bt;

sub run
{
  my %args = @_;

  my @cmd = @{ $args{cmd} };

  if ($args{stdout})
    {
      my $out = `@cmd`; 
      my $c = $!;
     
      print $out;
     
     
      if ($c)
        {
           die ("Command `@cmd' failed\n");
        }
     
      return $out;
    }
  else
    {
      system (@cmd)
        and die ("Command `@cmd' failed\n");
    }
}

sub createPack
{
  my @argv = @_;
  my $gmkpack = &getGmkpack ();
  my $out = &run (cmd => [$gmkpack, @argv], stdout => 1);
  my ($pack) = ($out =~ m/Creating pack (\S+) /goms);
  return $pack;
}

sub getGmkpack
{
  my @PATH = split (m/:/o, $ENV{PATH});

  my $GMKpack = 'File::Spec'->rel2abs ($0);

  for my $PATH (@PATH)
    {
      my $gmkpack = "$PATH/gmkpack";
      if ((-f $gmkpack) && ($gmkpack ne $GMKpack))
        {
          return $gmkpack;
        }
    }
}

my @argv = @ARGV;

my %o;
my @o = qw (r b u);

for my $i (0 .. $#argv-1)
  {
    my ($o) = ($argv[$i] =~ m/^-([a-z])$/o);
    if ($o && grep ({ $o eq $_ } @o))
      {
        $o{$o} = $argv[$i+1];
      }
  }

die if (grep { ! $o{$_} } @o);

my $pack = &createPack (@argv);

chdir ($pack);

my $branch = "$o{r}_$o{u}";

&run (cmd => ['gitpack', '--init']);
&run (cmd => ['gitpack', 'branch', $branch]);
&run (cmd => ['gitpack', 'checkout', $branch]);
&run (cmd => ['vimpack', '-i']);

for my $ics (<./ics_*>)
  {
    &run (cmd => [$ics]);
  }


