#!/usr/bin/perl -w


=head1 NAME

fixpack

=head1 SYNOPSIS

Insert in your gmkfile :

  FRTNAME = /home/gmap/mrpm/marguina/bin/fixpack --type xterm --log -- /home/gmap/mrpm/khatib/public/bin/mpiifort_wrapper

Or in your ics_masterodb :

  cat > $GMKWRKDIR/.masterodb_load <<end_of_masterodb_load
  /home/gmap/mrpm/marguina/bin/fixpack --type xterm  -- mpiifort -v -fp-stack-check -qopenmp -qopenmp-threadprivate compat -shared-intel -lrt -lstdc++
  end_of_masterodb_load


=head1 DESCRIPTION

C<fixpack> is a script for wrapping gmkpack compiler & linker wrapper scripts. 
It allows the user to debug interactively code at compile time : C<gmkpack> 
will invoke it when compiling a FORTRAN unit or linking an executable fails.

=head1 DETAILS

C<fixpack> will then start a interactive session allowing the user to edit
the file being compiled and compile it with different options.

Once the user exits the interactive session, the file (if modified) is copied
back to the user local pack. C<fixpack> will attempt to compile the file
again.

=head2 SESSIONS

Two kinds of interactive sessions are available (option C<--type>):

=over 4

=item xterm

C<fixpack> will create an xterm running a shell in the directory used by 
C<gmkpack>; this xterm will pop up in the user desktop.

=item screen

C<fixpack> will create a screen session, that the user can attach to, using
C<screen -x>.

=back

=head2 ALIASES

C<fixpack> provides two aliases :

=over 4

=item e

Edit the file.

=item r

Compile again.

=back

=head1 OPTIONS

=over 4

=item C<--type> 

screen or xterm

=item C<--warn>

If set, will print a message in the user terminal where gmkpack is executing,
stating that the file being compiled is ready for interactive debug.

=item C<--log>

If set, C<fixpack> will log information in C</tmp/fixpack.$USER.log>.

=back

=head1 EXITING FIXPACK

On exit, C<fixpack> will attempt to run the original command. Unless a
script named C<compile.sh> exists; in this case, C<fixpack> will run 
this script instead of the original command.

=head1 SEE ALSO

C<gmkpack>

=head1 AUTHOR

pmarguinaud@hotmail.com

=cut


package Linux;

use strict;
use FileHandle;
use File::Basename;
use Data::Dumper;

sub getStatus 
{
  my $pid = shift;
  my @attr = do { my $fh = 'FileHandle'->new ("</proc/$pid/status"); <$fh> };
  my %attr;
  for my $attr (@attr)
    {
      chomp ($attr);
      my ($k, $v) = ($attr =~ m/^([_\w]+)\s*:\s*(\S.*|)$/o);
      $attr{$k} = $v;
    }
  return \%attr;
}

sub getPPid 
{
  my $pid = shift;
  my $attr = &getStatus ($pid);
  return $attr->{PPid};
}

sub getFd
{
  my $pid = shift;
  my @fd = map { &basename ($_) } </proc/$pid/fd/*>;
  
  my %fd;
  for my $fd (@fd)
    {
      $fd{$fd} = readlink ("/proc/$pid/fd/$fd");
    }
  return \%fd;
}


package main;

use strict;
use FileHandle;
use File::stat;
use File::Copy;
use File::Path;
use File::Basename;
use Getopt::Long;
use Data::Dumper;

sub slurp
{
  my $f = shift;
  my $data = do { local $/ = undef; my $fh = 'FileHandle'->new ("<$f"); <$fh> };
  return $data;
}

sub eq
{
  my ($f, $g) = @_;
  return &slurp ($f) eq &slurp ($g);
}

sub script
{
  'FileHandle'->new ('>' . $_[0])->print ($_[1]);
  chmod (0755, $_[0]);
}

my %opts = (qw (type xterm), init => $ENV{GMK_LOCAL_PROFILE});
my @opts_s = qw (type init);
my @opts_f = qw (log warn);

&GetOptions 
(
  (map { ("$_=s" => \$opts{$_}) } @opts_s),
  (map { ($_ => \$opts{$_}) } @opts_f),
);

my @cmd = @ARGV;

exit (0) unless (system (@cmd));

my $user = getpwuid ($<);
my $prog = &basename ($0, qw (.pl));

# Try to get user TTY if any

my $stdout;
for (my $pid = $$; $pid; $pid = &Linux::getPPid ($pid))
  {
    my $fd = &Linux::getFd ($pid);
    $stdout = $fd->{1};
    last if ($stdout && ($stdout =~ m,^/dev/pts,o));
  }

my $log = sub { };

sub xcopy 
{
  my ($f, $g) = @_;
  $log->("copy ($f, $g)\n");
  &copy ($f, $g);
}

if ($opts{log})
  {
     my $fhlog = 'FileHandle'->new (">>/tmp/$prog.$user.log");
     $fhlog->autoflush (1);

     *STDOUT = $fhlog;
     *STDERR = $fhlog;

     $log = sub 
     { 
       use POSIX;
       print "==$$== ";
       print strftime ("%F %T", localtime time);
       print " ";
       print @_ 
     };
  }

my @session;

if ($opts{type} eq 'xterm')
  {
    @session = qw (xterm +sb -bg black -fg grey70 -geometry 150x60+0+0 -e ./.bin/shell.sh);
  }
elsif ($opts{type} eq 'screen')
  {
    @session = (qw (screen -S), $prog, qw (-D -m ./.bin/shell.sh));
  }
else
  {
    $log->("Unknown type : $opts{type}");
  }

# Find file processed by gmkpack

# pack : pack we compile for
# temp : local file name; symbolic link to original file
# orig : absolute path to original file
# file : relative path in pack (without src/local or src/main)

my ($temp, $orig, $pack, $file) = ('', '', @ENV{qw (TARGET_PACK GMK_CURRENT_FILE)});

$file ||= '';

$log->(&Dumper (\%opts));
$log->(&Dumper (\@cmd));
$log->("pack=$pack\n");
$log->("file=$file\n") if ($file);


if ($file)
  {
    # Copy file to current temporary directory
    $temp = &basename ($file);
    $log->("temp=$temp\n");
    
    unless (-l $temp)
      {
        $log->("$temp was not found\n");
        die;
      }
    
    $orig = readlink ($temp);
    $log->("orig=$orig\n");
    
    unlink ($temp);
    
    &xcopy ($orig, $temp);

    &mkpath ('.orig');
    &xcopy ($orig, ".orig/$temp"); # Keep original file for comparison
  }

# Create scripts

mkdir ('.bin');

&script ('.bin/run.sh', << "EOF");
#!/bin/bash
set -x
exec @cmd
EOF

&script ('.bin/bashrc', << "EOF");

if [ -f ~/.bashrc ]
then
  . ~/.bashrc
fi

if [ -f ~/.bash_profile ]
then
  . ~/.bash_profile
fi

export PS1="$prog> "

alias r='./.bin/run.sh'
alias e="vi $temp"

init=\"$opts{init}\"

if [ "x\$init" != "x" ]
then
  if [ -f "\$init" ]
  then
  . \$init
  fi
fi

./.bin/run.sh 

EOF


&script ('.bin/shell.sh', << 'EOF');
#!/bin/bash
exec bash --init-file ./.bin/bashrc -i
EOF

if ($opts{warn} && $stdout)
  {
    'FileHandle'->new (">$stdout")->print (<< "EOF");


$prog ready to debug @cmd

EOF
  }


# Start interactive session

system (@session);

if ($file)
  {
    # Copy back changes to local pack if any
    unless (&eq ($orig, $temp))
      {
        &xcopy ($temp, "$pack/src/local/$file") if (-f $temp);
      }
  }

# Compile once more, to check everythning is OK

my $compile = 'compile.sh';

if (-f $compile)
  {
    chmod (0755, $compile);
    if (system ("./$compile"))
      {
        die;
      }
    unlink ($compile);
  }
else
  {
    exec (@cmd);
  }



